./bench/Counter.hpp:#if defined(STM_CHECKPOINT)
./bench/Benchmark.cpp:#if defined(STM_LIB_FAIR)
./bench/Benchmark.cpp:#if defined(STM_LIB_FAIR)
./libstamp/rstm.cpp:#if defined(STM_LIB_RSTM) || defined(STM_LIB_REDO_LOCK)
./libstamp/rstm.cpp:#if !defined(STM_ALLOCATOR_MALLOC)
./libstamp/rstm.cpp:#if !defined(CM)
./libstamp/rstm.cpp:#if !defined(VERSIONING)
./libstamp/rstm.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./alt-license/TypeTraits.h:#if (defined _MSC_VER) && (_MSC_VER < 1400)
./alt-license/TypeTraits.h:  //     class template defined below.
./alt-license/TypeTraits.h:  //     class template defined below.
./alt-license/TypeTraits.h:  //     TypeTraits class template defined below.
./alt-license/TypeTraits.h:  // Helper types for class template TypeTraits defined below
./alt-license/TypeManip.h:      // Dummy enum to make sure that both classes are fully defined.
./alt-license/TypeManip.h:      // Dummy enum to make sure that both classes are fully defined.
./alt-license/TypeManip.h:      // Dummy enum to make sure that both classes are fully defined.
./alt-license/TypeManip.h:      // Dummy enum to make sure that both classes are fully defined.
./alt-license/TypeManip.h:      // Dummy enum to make sure that both classes are fully defined.
./alt-license/TypeManip.h:      // Dummy enum to make sure that both classes are fully defined.
./alt-license/LGPL.txt:    a purpose that is entirely well-defined independent of the
./alt-license/LGPL.txt:threshold for this to be true is not precisely defined by law.
./alt-license/static_check.h:// id is a C++ identifier that does not need to be defined
./stmconfig.cpp:#if defined(_MSC_VER)
./stmconfig.cpp:#elif defined(__linux__)
./stmconfig.cpp:#elif defined(__APPLE__)
./stmconfig.cpp:#elif defined(__OpenBSD__)
./stmconfig.cpp:#elif defined(__FreeBSD__)
./stmconfig.cpp:#elif defined(_AIX)
./stmconfig.cpp:#elif defined(__sun)
./stmconfig.cpp:#if defined(_MSC_VER)
./stmconfig.cpp:#elif defined(__llvm__)
./stmconfig.cpp:#elif defined(__GNUC__)
./stmconfig.cpp:#if !defined(CXX)
./stmconfig.cpp:#if defined(_MSC_VER)
./stmconfig.cpp:#elif defined(__sparc__)
./stmconfig.cpp:#elif defined(__i386__) || defined(__x86_64__)
./stmconfig.cpp:#elif defined(__ia64__)
./stmconfig.cpp:#elif defined(_POWER)
./stmconfig.cpp:#if !defined(_POWER)
./stmconfig.cpp:#if !defined(_POWER)
./stmconfig.cpp:#if !defined(_POWER)
./stmconfig.cpp:  allocators.addoption("STM_ALLOCATOR_MALLOC",         "Malloc       - As defined by your system");
./stmconfig.cpp:#if !defined(_POWER)
./stmconfig.cpp:#if !defined(_POWER)
./stmconfig.cpp:#if !defined(_POWER)
Binary file ./stmconfig matches
./stm/sgla.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/rstm.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/rstm.cpp:#if defined(STM_CHECKPOINT)
./stm/rstm.cpp:#if defined(STM_CHECKPOINT)
./stm/rstm.cpp:#if defined(STM_CHECKPOINT)
./stm/rstm.cpp:#if defined(STM_CHECKPOINT)
./stm/rstm.cpp:#if defined(STM_PRIV_TFENCE) || defined(STM_PRIV_LOGIC)
./stm/rstm.cpp:#if defined(STM_RETRY_SLEEP)
./stm/rstm.cpp:#if defined(STM_ROLLBACK_THROW)
./stm/rstm.cpp:#elif defined(STM_ROLLBACK_SETJMP)
./stm/rstm.cpp:#elif defined(STM_RETRY_BLOOM)
./stm/rstm.cpp:#if defined(STM_ROLLBACK_THROW)
./stm/rstm.cpp:#elif defined(STM_RETRY_VISREAD)
./stm/rstm.cpp:#if defined(STM_ROLLBACK_THROW)
./stm/et.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/redo_lock.hpp:#if defined(__i386__) || defined(_MSC_VER) /* little endian */
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/redo_lock.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/cm/WordBased.hpp:#if defined(_MSC_VER)
./stm/redo_lock.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/redo_lock.cpp:#if !defined(STM_PRIV_TFENCE) && !defined(STM_PRIV_LOGIC)
./stm/ringsw.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/strict.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/strict.cpp:#if defined(STM_PRIV_COMMIT_SERIALIZE)
./stm/strict.cpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.cpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.cpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.cpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.cpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/fair.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/flow.hpp:#if defined(STM_PRIV_SFS)
./stm/flow.hpp:#if defined(STM_PRIV_SFS)
./stm/flow.hpp:#if defined(STM_PRIV_ALA)
./stm/flow.hpp:#elif defined(STM_PRIV_SFS)
./stm/flow.hpp:#if defined(STM_PRIV_SFS)
./stm/flow.hpp:#if defined(STM_PRIV_SFS)
./stm/flow.hpp:#if defined(STM_PRIV_SFS)
./stm/fair.hpp:#if defined(STM_CM_LW)
./stm/fair.hpp:#elif defined(STM_CM_BLOOMPRIO)
./stm/fair.hpp:#elif defined(STM_CM_VISREADPRIO)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/rstm.hpp:#elif defined(STM_ROLLBACK_SETJMP)
./stm/rstm.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/llt.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/llt.cpp:#if defined(STM_ROLLBACK_THROW) && defined(_POWER)
./stm/llt.cpp:#if defined(STM_INEV_BLOOM_SMALL)
./stm/llt.cpp:#elif defined(STM_INEV_BLOOM_MEDIUM)
./stm/llt.cpp:#elif defined(STM_INEV_BLOOM_LARGE)
./stm/llt.cpp:#if defined(STM_INEV_GRL) || defined(STM_INEV_GWLFENCE)
./stm/llt.cpp:#if defined(STM_INEV_GRL) || defined(STM_INEV_GWLFENCE)
./stm/stm.hpp:#if defined (STM_LIB_RSTM)
./stm/stm.hpp:#elif defined (STM_LIB_REDO_LOCK)
./stm/stm.hpp:#elif defined (STM_LIB_LLT)
./stm/stm.hpp:#elif defined (STM_LIB_ET)
./stm/stm.hpp:#elif defined (STM_LIB_TML)
./stm/stm.hpp:#elif defined (STM_LIB_TML_LAZY)
./stm/stm.hpp:#elif defined (STM_LIB_PRECISE)
./stm/stm.hpp:#elif defined (STM_LIB_FLOW)
./stm/stm.hpp:#elif defined (STM_LIB_STRICT)
./stm/stm.hpp:#elif defined (STM_LIB_SGLA)
./stm/stm.hpp:#elif defined (STM_LIB_FAIR)
./stm/stm.hpp:#elif defined (STM_LIB_RINGSW)
./stm/stm.hpp:#elif defined (STM_LIB_CGL)
./stm/stm.hpp:#   error "Error, no version defined"
./stm/llt.hpp:#if defined(STM_INEV_BLOOM_SMALL) || defined(STM_INEV_BLOOM_MEDIUM) ||  \
./stm/llt.hpp:  defined(STM_INEV_BLOOM_LARGE)
./stm/llt.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/llt.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/llt.hpp:#if defined(_POWER)
./stm/llt.hpp:#if defined(STM_INEV_BLOOM_SMALL)
./stm/llt.hpp:#elif defined(STM_INEV_BLOOM_MEDIUM)
./stm/llt.hpp:#elif defined(STM_INEV_BLOOM_LARGE)
./stm/llt.hpp:#if defined(STM_INEV_GRL) || defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/llt.hpp:#if defined(STM_INEV_DRAIN)
./stm/llt.hpp:#if defined(STM_INEV_GRL) || defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_GRL)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_BLOOM)
./stm/llt.hpp:#if defined(STM_INEV_BLOOM) || defined(STM_INEV_GWL) || \
./stm/llt.hpp:  defined(STM_INEV_GWLFENCE) || defined(STM_INEV_IRL)
./stm/llt.hpp:#elif defined(STM_INEV_DRAIN)
./stm/llt.hpp:#if defined(STM_INEV_GRL) || defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/llt.hpp:#if defined(STM_INEV_GWLFENCE) || defined(STM_INEV_GRL)
./stm/llt.hpp:#if defined(STM_INEV_DRAIN)
./stm/llt.hpp:#if defined(STM_INEV_NONE)
./stm/llt.hpp:#elif defined(STM_INEV_DRAIN)
./stm/llt.hpp:#elif defined(STM_INEV_GRL)
./stm/llt.hpp:#elif defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/llt.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/llt.hpp:#if defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_INEV_GRL)
./stm/llt.hpp:#if defined(STM_INEV_DRAIN)
./stm/llt.hpp:#if defined(STM_INEV_GWL)
./stm/llt.hpp:#if defined(STM_INEV_GWLFENCE)
./stm/llt.hpp:#if defined(STM_INEV_GWL)
./stm/llt.hpp:#if defined(STM_INEV_BLOOM)
./stm/llt.hpp:#if defined(STM_INEV_DRAIN)
./stm/llt.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/llt.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/llt.hpp:#if defined(STM_ROLLBACK_THROW)
./stm/llt.hpp:#if defined(STM_USE_MINIVECTOR_WRITESET)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_NONE)
./stm/llt.hpp:#if defined(STM_INEV_DRAIN) || defined(STM_INEV_GWLFENCE) || \
./stm/llt.hpp:  defined(STM_INEV_GRL)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_GWL)
./stm/llt.hpp:#if defined(STM_INEV_BLOOM)
./stm/llt.hpp:#if defined(STM_INEV_GRL)
./stm/llt.hpp:#if defined(STM_INEV_IRL)
./stm/llt.hpp:#if defined(STM_INEV_DRAIN) || defined(STM_INEV_GWLFENCE)
./stm/cgl.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/cgl.cpp:#if defined(STM_LOCK_TATAS)
./stm/cgl.cpp:#elif defined(STM_LOCK_TICKET)
./stm/cgl.cpp:#elif defined(STM_LOCK_MCS)
./stm/cgl.cpp:#elif defined(STM_LOCK_PTHREAD) && !defined(_MSC_VER)
./stm/cgl.cpp:#elif defined(_MSC_VER)
./stm/tml_lazy.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/api/redo_lock_api.hpp:#if defined(STM_API_ASSERTS_ON)
./stm/api/redo_lock_api.hpp:#elif defined(STM_API_ASSERTS_OFF)
./stm/api/redo_lock_api.hpp:#elif defined(STM_API_ASSERTS_ON_NO_UN_PTR)
./stm/api/redo_lock_api.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/api/redo_lock_api.hpp:#elif defined(STM_ROLLBACK_THROW)
./stm/api/redo_lock_api.hpp:#if defined(_MSC_VER)
./stm/api/redo_lock_api.hpp:   * defined as part of the <code>T</code> class. <strong>Do not store the
./stm/api/redo_lock_api.hpp:   * defined as part of the <code>T</code> class. <strong>Do not store the
./stm/api/cgl_api.hpp:#if defined(STM_API_ASSERTS_ON)
./stm/api/cgl_api.hpp:#elif defined(STM_API_ASSERTS_OFF)
./stm/api/cgl_api.hpp:#elif defined(STM_API_ASSERTS_ON_NO_UN_PTR)
./stm/api/cgl_api.hpp:   *       life. Using the naked pointer can lead to undefined results.
./stm/api/wordbased_api.hpp:#if defined(STM_API_ASSERTS_ON)
./stm/api/wordbased_api.hpp:#elif defined(STM_API_ASSERTS_OFF)
./stm/api/wordbased_api.hpp:#elif defined(STM_API_ASSERTS_ON_NO_UN_PTR)
./stm/api/wordbased_api.hpp:#if defined(STM_ROLLBACK_NONE)
./stm/api/wordbased_api.hpp:#elif defined(STM_ROLLBACK_SETJMP)
./stm/api/wordbased_api.hpp:#elif defined(STM_ROLLBACK_THROW)
./stm/api/wordbased_api.hpp:   *       life. Using the naked pointer can lead to undefined results.
./stm/api/rstm_api.hpp:#if defined(STM_API_ASSERTS_ON)
./stm/api/rstm_api.hpp:#elif defined(STM_API_ASSERTS_OFF)
./stm/api/rstm_api.hpp:#elif defined(STM_API_ASSERTS_ON_NO_UN_PTR)
./stm/api/rstm_api.hpp:#if defined(STM_ROLLBACK_SETJMP)
./stm/api/rstm_api.hpp:#elif defined(STM_ROLLBACK_THROW)
./stm/api/rstm_api.hpp:#if defined(_MSC_VER)
./stm/cgl.hpp:#if defined(STM_LOCK_TATAS)
./stm/cgl.hpp:#elif defined(STM_LOCK_TICKET)
./stm/cgl.hpp:#elif defined(STM_LOCK_MCS)
./stm/cgl.hpp:#elif defined(STM_LOCK_PTHREAD) && !defined(_MSC_VER)
./stm/cgl.hpp:#elif defined(_MSC_VER)
./stm/cgl.hpp:#if defined(STM_LOCK_MCS)
./stm/cgl.hpp:#if defined(STM_LOCK_TATAS)
./stm/cgl.hpp:#elif defined(STM_LOCK_TICKET)
./stm/cgl.hpp:#elif defined(STM_LOCK_MCS)
./stm/cgl.hpp:#elif defined(STM_LOCK_PTHREAD) && !defined(_MSC_VER)
./stm/cgl.hpp:#elif defined(_MSC_VER)
./stm/cgl.hpp:#if defined(STM_LOCK_TATAS)
./stm/cgl.hpp:#elif defined(STM_LOCK_TICKET)
./stm/cgl.hpp:#elif defined(STM_LOCK_MCS)
./stm/cgl.hpp:#elif defined(STM_LOCK_PTHREAD) && !defined(_MSC_VER)
./stm/cgl.hpp:#elif defined(_MSC_VER)
./stm/flow.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/flow.cpp:#if defined(STM_PRIV_SFS)
./stm/precise.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/strict.hpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE) || defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE)
./stm/strict.hpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.hpp:#elif defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE) || defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PRIV_TFENCE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE)
./stm/strict.hpp:#elif defined (STM_PRIV_COMMIT_FENCE)
./stm/strict.hpp:#if defined(STM_PUBLICATION_TFENCE)
./stm/strict.hpp:#elif defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PUBLICATION_SHOOTDOWN)
./stm/strict.hpp:#if defined(STM_PRIV_COMMIT_SERIALIZE) || defined(STM_PRIV_COMMIT_FENCE)
./stm/tml.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/support/defs.hpp:#if !defined(STM_ALLOCATOR_GCHEAP_NOEPOCH) && !defined(STM_ALLOCATOR_GCHEAP_EPOCH)
./stm/support/defs.hpp:#if defined(STM_SIMULATOR_MINIMAL) || defined(STM_SIMULATOR_FULL)
./stm/support/atomic_ops.h:#if defined(_MSC_VER)
./stm/support/atomic_ops.h:#elif defined(__i386__) && defined(__GNUC__)
./stm/support/atomic_ops.h:#if defined(__llvm__) || ((__GNUC__ == 4) && (__GNUC_MINOR__ == 2))
./stm/support/atomic_ops.h:#elif defined(__ia64__) && defined(__GNUC__)
./stm/support/atomic_ops.h:#elif defined(__sparc__) && defined(__GNUC__)
./stm/support/atomic_ops.h:#elif defined(_POWER) && defined(__GNUC__)
./stm/support/Retry.hpp:#if   defined(STM_RETRY_SLEEP)
./stm/support/Retry.hpp:#elif defined(STM_RETRY_BLOOM)
./stm/support/Retry.hpp:#elif defined(STM_RETRY_VISREAD)
./stm/support/WBMMPolicy.hpp:#if defined(STM_ALLOCATOR_GCHEAP_NOEPOCH)
./stm/support/ConflictDetector.hpp:#if defined(STM_COMMIT_COUNTER)
./stm/support/ConflictDetector.hpp:#elif defined(STM_NO_COMMIT_COUNTER)
./stm/support/Privatization.hpp:#elif defined STM_PRIV_TFENCE
./stm/support/Inevitability.hpp:#elif defined STM_INEV_NONE
./stm/support/GCHeap.cpp:#if defined(STM_ALLOCATOR_GCHEAP_NOEPOCH) || defined(STM_ALLOCATOR_GCHEAP_EPOCH)
./stm/support/GCHeap.cpp:#if defined(LOCAL_POINTER_ANNOTATION)
./stm/support/ThreadLocalPointer.hpp: *    #if defined(LOCAL_POINTER_ANNOTATION)
./stm/support/ThreadLocalPointer.hpp:#if defined(STM_TLS_PTHREAD)
./stm/support/ThreadLocalPointer.hpp:#elif defined(STM_TLS_GCC)
./stm/support/ThreadLocalPointer.hpp:#elif defined(_MSC_VER)
./stm/support/ThreadLocalPointer.hpp:#if defined(STM_TLS_PTHREAD)
./stm/support/ThreadLocalPointer.hpp:#if defined(STM_TLS_PTHREAD)
./stm/support/ThreadLocalPointer.hpp:#if defined(STM_TLS_PTHREAD)
./stm/support/ThreadLocalPointer.hpp:#if defined(STM_TLS_PTHREAD)
./stm/support/ThreadLocalPointer.hpp:#if defined(STM_TLS_PTHREAD)
./stm/support/word_based_metadata.hpp:#    if defined(__i386__) || defined(_MSC_VER) /* little endian */
./stm/support/word_based_metadata.hpp:#    if defined(__i386__) || defined(_MSC_VER) /* little endian */
./stm/support/Bloom.hpp:#if defined(_MSC_VER)
./stm/support/hrtime.h:#if defined(__i386__) && !defined(__APPLE__) && !defined(_MSC_VER)
./stm/support/hrtime.h:#if defined(__FreeBSD__) || defined(__OpenBSD__)
./stm/support/hrtime.h:#if defined(__FreeBSD__)
./stm/support/hrtime.h:#elif defined(__OpenBSD__)
./stm/support/hrtime.h:#if defined(__linux__) && defined(__ia64__)
./stm/support/hrtime.h:#if defined(__sparc__)
./stm/support/hrtime.h:#elif defined(__APPLE__)
./stm/support/hrtime.h:#elif defined(_MSC_VER)
./stm/support/hrtime.h:#elif defined(_AIX)
./swarm/Game.cpp://  prevent accidentally building with the wrong option defined.
./swarm/Game.cpp:#if defined(STM_INEV_GRL)
./swarm/Game.cpp:#elif defined(STM_INEV_GWL)
./swarm/Game.cpp:#elif defined(STM_INEV_GWLFENCE)
./swarm/Game.cpp:#elif defined(STM_INEV_DRAIN)
./swarm/Game.cpp:#elif defined(STM_INEV_BLOOM_SMALL)
./swarm/Game.cpp:#elif defined(STM_INEV_BLOOM_MEDIUM)
./swarm/Game.cpp:#elif defined(STM_INEV_BLOOM_LARGE)
./swarm/Game.cpp:#elif defined(STM_INEV_IRL)
./swarm/Game.cpp:#elif defined(STM_INEV_NONE)
./swarm/GameState.hpp://    This is a singleton defined as GAMESTATE                            //
./swarm/World.hpp://    This is a singleton defined as WORLD                                //
./mesh/queues.hpp:#if defined(__i386__) || defined(_MSC_VER) /* little endian */
./mesh/queues.hpp:#elif defined(__sparc__) /* big endian */
